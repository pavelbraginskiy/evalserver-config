[evalserver]
port = "14401"
host = "192.168.32.1"
debug = 1

[jobmanager]
max_workers = 6
timeout = 11
min_deadline = 100 # minimum number of milliseconds to allow a deadline to request

[sandbox]
# Relative paths are turned to absolute ONLY by using the mount_base path
# target path's are absolute and only exist in the sandbox
home_dir = "/eval"
mount_base = "/home/ryan/evalserver/sandbox/system"
plugin_base = "/home/ryan/evalserver/sandbox/plugins" # TODO is this good?
plugins = ["Perlbot", "PerlbotEggs", "Cobol"]

# Be careful with these, if you mount stuff under an existing directory on your
# system a directory will be created there in order to facilitate the private
# bind mount.  This is part of why I recommend using debootstrap or similar
# To create a shadow system for the evalserver

bind_mounts = [
	{src = "lib64",           target = "/lib64"},
	{src = "lib",             target = "/lib"},
	{src = "usr",         target = "/usr"},
	{src = "etc",         target = "/etc"},
	{src = "bin",         target = "/bin"},
	{src = "/home/ryan/bots/perlbuut/langs", target = "/langs"},
	{src = "/home/ryan/perl5", target = "/perl5"},
	{src = "/home/ryan/perl5", target = "/home/ryan/perl5"},
	{src = "/home/ryan/bots/perlbuut/jail_root",     target = "/eval"}
]

[sandbox.seccomp]
yaml = "/home/ryan/evalserver/sandbox/etc/seccomp.yaml"

[sandbox.devices]
# Entries in /dev that must exist
# each entry is an array, [type, major, minor]
null = ["c", 1, 3]
urandom = ["c", 1, 9]
random = ["c", 1, 9] # make this just the same as urandom, it doesn't matter to us

[sandbox.environment]
TZ="Asia/Pyongyang"
EMAIL_SENDER_TRANSPORT="Test"

[sandbox.rlimits]
VMEM = "750M"
AS = "750M"
DATA = "500M"
STACK = "30M"
NPROC = 20
NOFILE = 30
OFILE = 30
OPEN_MAX = 30
LOCKS = 5
MEMLOCK = 100
CPU = 10

[language]
# Each language requires a few keys
#
# One of sub or bin
# * sub is the name of a perl subroutine in the wrapper script
# * bin is the path to a binary to run after sandboxing
# And
# * args => ['-w', '%file%']
#
# Optional args
# TODO figure out a sane way to do the wrapper scripts for -e and Dumper of results etc.

"perl"={sub="run_perl", seccomp_profile="lang_perl"}
"deparse"={sub="deparse_perl_code", seccomp_profile="lang_perl"}


# TODO perls 1-3
[language."perl1"]
bin="/langs/perl-1.0.16/bin/perl"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl2"]
bin="/langs/perl2/bin/perl"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

# -> % ls ~/bots/perlbuut/langs
# node-custom  perl-1.0.16  perl2  perl3  test.log

[language."perl3"]
bin="/langs/perl3/bin/perl"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl4"]
bin="/perl5/perlbrew/perls/perl-4.036/bin/perl"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl5.0"]
bin="/langs/perl-5.000/bin/perl5.000"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl5.1"]
bin="/langs/perl-5.001/bin/perl5.001"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl5.2"]
bin="/langs/perl-5.002/bin/perl5.00201"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl5.3"]
bin="/langs/perl-5.003/bin/perl"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl5.4"]
bin="/langs/perl-5.004/bin/perl"
args=["-e", "%CODE%"]
seccomp_profile="lang_perl"

[language."perl5.5"]
bin="/perl5/perlbrew/perls/perl-5.005_04/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.6"]
bin="/perl5/perlbrew/perls/perl-5.6.2/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.8"]
bin="/perl5/perlbrew/perls/perl-5.8.9/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.10"]
bin="/perl5/perlbrew/perls/perl-5.10.1/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.12"]
bin="/perl5/perlbrew/perls/perl-5.12.5/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.14"]
bin="/perl5/perlbrew/perls/perl-5.14.4/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.16"]
bin="/perl5/perlbrew/perls/perl-5.16.3/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.18"]
bin="/perl5/perlbrew/perls/perl-5.18.4/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.20"]
bin="/perl5/perlbrew/perls/perl-5.20.3/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.22"]
bin="/perl5/perlbrew/perls/perl-5.22.3/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.24"]
bin="/perl5/perlbrew/perls/perl-5.24.0/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl5.26"]
bin="/perl5/perlbrew/perls/perlbot-5.26.1/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."cperl"]
bin="/perl5/perlbrew/perls/perlbot-cperl-5.26/bin/perl"
args=["-e", "%CODE%"]
wrap_code="perl_wrap"
seccomp_profile="lang_perl"

[language."perl6"]
# exec /langs/perl6/bin/moar  --execname="$0" --libpath="/langs/perl6/share/nqp/lib" --libpath="/langs/perl6/share/nqp/lib" --libpath="/langs/perl6/share/perl6/lib" --libpath="/langs/perl6/share/perl6/runtime" /langs/perl6/share/perl6/runtime/perl6.moarvm "$@"
bin="/langs/perl6/bin/moar"
args=["--execname=perl6", "--libpath=/langs/perl6/share/nqp/lib", "--libpath=/langs/perl6/share/nqp/lib", "--libpath=/langs/perl6/share/perl6/lib", "--libpath=/langs/perl6/share/perl6/runtime", "/langs/perl6/share/perl6/runtime/perl6.moarvm", "%FILE%"]
seccomp_profile="lang_perl6"

[language.ruby]
bin="/usr/bin/ruby2.3"
args=["%FILE%"]
seccomp_profile="lang_ruby"

[language.javascript]
bin="/langs/node-custom/bin/node"
args=["--v8-pool-size=1", "%FILE%"]
seccomp_profile="lang_javascript"

[language.cobol]
sub="compile_cobol"
seccomp_profile="lang_cobol"
